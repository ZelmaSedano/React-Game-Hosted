{"version":3,"sources":["modules/SquareComponent.js","App.js","serviceWorker.js","index.js"],"names":["SquareComponent","props","classes","className","state","onClick","index","clearState","App","useState","gameState","updateGameState","isXChange","updateIsXChange","onUserClicked","strings","Array","from","clearGame","useEffect","winner","checkWinner","alert","lines","console","log","i","length","a","b","c","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3a0aa9b7.chunk.js","sourcesContent":["import React from 'react';\n\nconst SquareComponent = (props) => {\n  // if false it's square, if true it's props-square\n  const classes = props.className ? `${props.className} square` : `square`;\n  return (\n    <span\n      // if false, it's white, if it's 'X', it's aqua\n      className={classes + (props.state === 'X' ? ` fc-aqua` : ` fc-white`)}\n      onClick={() => props.onClick(props.index)}\n    >\n      {props.state}\n    </span>\n  );\n};\nexport default SquareComponent;\n","import React, { useEffect, useState } from 'react';\nimport SquareComponent from './modules/SquareComponent';\n\n// clears all the square values\nconst clearState = ['', '', '', '', '', '', '', '', '', ''];\n\n// based off this YouTube Tutorial: https://www.youtube.com/watch?v=ZH9RXSVjj4Y\n\n// App Component\nfunction App() {\n  // Two States: 1) gameState, 2) isXChange\n  //**  determines the winner?************************************************************???\n  const [gameState, updateGameState] = useState(clearState);\n  // changes X to O\n  const [isXChange, updateIsXChange] = useState(false);\n\n  // click function that an index\n  const onUserClicked = (index) => {\n    // takes the array from gameState\n    let strings = Array.from(gameState);\n    // ** checks the array from gameState, if it has the index, just return*****************???\n    if (strings[index]) return;\n    strings[index] = isXChange ? 'X' : '0';\n    updateIsXChange(!isXChange);\n    updateGameState(strings);\n  };\n\n  const clearGame = () => {\n    updateGameState(clearState);\n  };\n  useEffect(() => {\n    let winner = checkWinner();\n    if (winner) {\n      clearGame();\n      alert(`Ta da ! ${winner} won the Game !`);\n    }\n  }, [gameState]);\n\n  const checkWinner = () => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    console.log(\n      'Class: App, Function: checkWinner ==',\n      gameState[0],\n      gameState[1],\n      gameState[2]\n    );\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        gameState[a] &&\n        gameState[a] === gameState[b] &&\n        gameState[a] === gameState[c]\n      ) {\n        return gameState[a];\n      }\n    }\n    return null;\n  };\n\n  return (\n    <div className='app-header'>\n      <p className='heading-text'>Tic-Tac-Toe</p>\n      <div className='row jc-center'>\n        <SquareComponent\n          className='b-bottom-right'\n          onClick={() => onUserClicked(0)}\n          state={gameState[0]}\n        />\n        <SquareComponent\n          className='b-bottom-right'\n          onClick={() => onUserClicked(1)}\n          state={gameState[1]}\n        />\n        <SquareComponent\n          className='b-bottom'\n          onClick={() => onUserClicked(2)}\n          state={gameState[2]}\n        />\n      </div>\n      <div className='row jc-center'>\n        <SquareComponent\n          className='b-bottom-right'\n          onClick={() => onUserClicked(3)}\n          state={gameState[3]}\n        />\n        <SquareComponent\n          className='b-bottom-right'\n          onClick={() => onUserClicked(4)}\n          state={gameState[4]}\n        />\n        <SquareComponent\n          className='b-bottom'\n          onClick={() => onUserClicked(5)}\n          state={gameState[5]}\n        />\n      </div>\n      <div className='row jc-center'>\n        <SquareComponent\n          className='b-right'\n          onClick={() => onUserClicked(6)}\n          state={gameState[6]}\n        />\n        <SquareComponent\n          className='b-right'\n          onClick={() => onUserClicked(7)}\n          state={gameState[7]}\n        />\n        <SquareComponent\n          onClick={() => onUserClicked(8)}\n          state={gameState[8]}\n        />\n      </div>\n      <button className='clear-button' onClick={clearGame}>\n        Clear Game\n      </button>\n      <p className='fc-aqua fw-600'>Zelma, Ink.</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}